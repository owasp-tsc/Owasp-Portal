{"version":3,"sources":["Context/Navbar.js","components/navbar.js","components/sideBar.js","components/render.js","components/login.js","components/register.js","App.js","serviceWorker.js","index.js"],"names":["NavbarContext","createContext","NavbarProvider","this","props","children","value","Provider","PureComponent","Consumer","Navbar","useContext","username","updateGlobalState","className","href","sideBar","Component","link","Render","onChange","e","setState","target","name","onClick","a","console","log","data","state","list","number","Question","axios","post","length","Number","get","Fragment","type","Rendering","Login","onSubmit","preventDefault","pass","update","onRegister","register","incorrect","success","data-validate","placeholder","Hook","App","boolState","navbarProps","path","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.736f1505.chunk.js","sourcesContent":["// Create a seperate context for all the components present inside App.js\n\nimport React, { createContext, PureComponent } from \"react\"\n\nconst NavbarContext = createContext({})\n\nclass NavbarProvider extends PureComponent {\n  render() {\n    const { children, value } = this.props\n    return (\n      <NavbarContext.Provider value={{ ...value }}>\n        {children}\n      </NavbarContext.Provider>\n    )\n  }\n}\n\nexport const NavbarConsumer = NavbarContext.Consumer\nexport { NavbarContext }\nexport default NavbarProvider\n","\nimport React, { useContext } from 'react';\nimport { NavbarContext } from '../Context/Navbar';\n\nfunction Navbar() {\n  const { username, updateGlobalState } = useContext(NavbarContext) // Using global Variables via context and we can use them anywhere in the hierarchy \n  return (\n    <section>\n      <nav className=\"navbar navbar-dark bg-dark hornav fixed-top\">\n        <a href=\"#\" className=\"navbar-brand\">OWASP</a>\n        <div className=\"ml-auto\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\"><a href=\"#\" className=\"nav-link\">Welcome <span>{username}</span></a></li>\n            {/* Updating username via button below \n            <button onClick={() => updateGlobalState({ username: \"Username Got Updated!\" })}>Click me to update Username</button>*/}\n          </ul>\n        </div>\n      </nav>\n    </section>\n  )\n};\n\n\nexport default Navbar","import React, { Component } from 'react'\n\nclass sideBar extends Component {\n    render() {\n        return (\n\n                <section className=\"content\">\n                  <nav className=\"navbar navbar-dark bg-dark flex-column vertnav sticky\">\n                    <div>\n                      <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\"><a href=\"#\" className=\"nav-link\"><i className=\"far fa-user\" /></a></li>\n                        <li className=\"nav-item\"><a href=\"#\" className=\"nav-link\"><i className=\"far fa-file\" /></a></li>\n                        {/*<li className=\"nav-item\"><a href=\"#\" className=\"nav-link\"><i className=\"fas fa-tv\" /></a></li>\n                        <li className=\"nav-item\"><a href=\"#\" className=\"nav-link\"><i className=\"far fa-user\" /></a></li>\n                        <li className=\"nav-item\"><a href=\"#\" className=\"nav-link\"><i className=\"far fa-file\" /></a></li>\n                        <li className=\"nav-item\"><a href=\"#\" className=\"nav-link\"><i className=\"fas fa-phone\" /></a></li>\n        <li className=\"nav-item\"><a href=\"#\" className=\"nav-link\"><i className=\"fas fa-tv\" /></a></li>*/}\n                      </ul>\n                    </div>\n                  </nav>\n                </section>\n              );\n    }\n}\n\nexport default sideBar;\n","import React, { Component , useContext} from 'react';\nimport axios from 'axios';\nimport { NavbarContext } from '../Context/Navbar';\nconst link = 'https://owasp-portal.herokuapp.com/';\nclass Render extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      list: [{ \"Question\": \"\" }],\n      length: 0,\n      number: 0,\n      value: Number\n    }\n   \n  }\n\n  async componentDidMount() {\n    var list = await axios.get(link + 'questions');\n    //const list= [{\"Question\" : \"asdsafas\"  , \"Answer\" : 23}];  \n    console.log(list.data.length);\n    this.setState({ list: list.data, length: list.data.length });\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  onClick = async (e) => {\n    console.log(this.props.username);\n\n    const data = {\n      \"Username\": this.props.username,\n      \"Question\": this.state.list[this.state.number].Question,\n      \"Answer\": this.state.value\n    }\n   const upload = await axios.post(link +'answer', data);\n   console.log(this.state.number);\n    this.setState({ number: this.state.number + 1 });\n\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.length === this.state.number) && <div className = \"thankyou\"><h1>Thank You!</h1></div>}\n        <main>\n          {(this.state.length > this.state.number) && this.state.list[this.state.number].Question}\n          <br></br>\n          {(this.state.length > this.state.number) && (<React.Fragment>\n          <div className=\"color\"></div>\n          <input type=\"text/css\" className=\"postionButton\" value={this.state.value} name=\"value\" onChange={this.onChange}></input>\n          <button className=\"postionButton\" onClick={this.onClick}>Submit</button>\n          </React.Fragment>)}\n        </main>\n      </React.Fragment>\n    );\n  }\n};\n\n\n\n\nconst Rendering = (props) => {\n  let {username } = useContext(NavbarContext);\n  console.log(username);\n  return ( <Render {...props} username = {username} /> );\n}\n \nexport default Rendering;","import React, { Component, useContext } from 'react';\nimport { Link } from \"@reach/router\";\nimport axios from 'axios';\nimport {NavbarContext} from \"../Context/Navbar\";\n\n\nvar link = \"https://owasp-portal.herokuapp.com/\";\nclass Login extends Component {\n \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: \"\",\n      pass: \"\",\n      incorrect: \"\",\n      register: \"\",\n      success: \"\"\n    }\n  }\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  onSubmit = async (e) => {\n    e.preventDefault();\n    const data = {\n      \"Username\": this.state.value,\n      \"password\": this.state.pass\n    };\n    console.log(data);\n    const update = await axios.post(link +'loginData', data);\n   console.log(update);\n    if (update.data === \"success\") {\n      this.props.update({ username: this.state.value});\n      this.props.onClick();\n    }\n    else\n      this.setState({ \"incorrect\": \"Username or password was incorrect\" })\n  }\n\n  onRegister = async (e) => {\n    e.preventDefault();\n    const data = {\n      \"Username\": this.state.register\n    };\n    const update = await axios.post(link +'user', data);\n    if (update) this.setState({ \"success\": \"Registered Successfully\" });\n    console.log(update);\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"limiter\">\n          <div className=\"container-login100\">\n            <div className=\"wrap-login100\">\n              <form className=\"login100-form validate-form p-l-55 p-r-55 p-t-178\" onSubmit={this.onSubmit}>\n                <span className=\"login100-form-title\">\n                  Sign In\n              </span>\n\n                <div className=\"wrap-input100 validate-input m-b-16\" data-validate=\"Please enter username\">\n                  <input className=\"input100\" type=\"text\" value={this.state.value} onChange={this.onChange} name=\"value\" placeholder=\"Username\" />\n                  <span className=\"focus-input100\" />\n                </div>\n                <div className=\"wrap-input100 validate-input\" data-validate=\"Please enter password\">\n                  <input className=\"input100\" type=\"password\" name=\"pass\" value={this.state.pass} onChange={this.onChange} placeholder=\"Password\" />\n                  <span className=\"focus-input100\" />\n                </div>\n                {this.state.incorrect}\n                <br></br>\n                <div className=\"container-login100-form-btn\">\n                  <button className=\"login100-form-btn\" type=\"submit\" >\n                    Sign in\n                </button>\n\n                </div>\n              </form>\n              <form onSubmit={this.onRegister} className=\"login100-form validate-form p-l-55 p-r-55 p-t-60\">\n                <div className=\"wrap-input100 validate-input m-b-16\" data-validate=\"Please enter username\">\n                  <input className=\"input100\" type=\"text\" value={this.state.register} onChange={this.onChange} name=\"register\" placeholder=\"Username\" />\n                  <span className=\"focus-input100\" />\n                </div>\n                <br></br>\n                <div className=\"container-login100-form-btn\">\n                  <button className=\"login100-form-btn\" type=\"submit\" >\n                    Sign up\n                </button>\n                </div>\n                {this.state.success}\n                <br></br>\n              </form>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n};\n\n\n\nconst Hook = (props)=>{\n\n  let {username , updateGlobalState} = useContext(NavbarContext);\n  return <Login username = {username} update={(value)=>updateGlobalState(value)} {...props}/>\n}\n\nexport default Hook;\n","import React, { Component } from 'react'\n\nexport class register extends Component {\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n\nexport default register\n","import React, { useState } from 'react';\nimport { Router } from \"@reach/router\";\nimport './App.css';\nimport Navbar from './components/navbar';\nimport SideBar from './components/sideBar';\nimport Render from './components/render';\nimport Login from './components/login';\nimport Register from './components/register';\nimport NavbarProvider from './Context/Navbar';\n\nclass App extends React.PureComponent {\n\n  constructor(props) {\n    super(props)\n\n    // global state \n    this.state = {\n      boolState: false,\n      username: \"Owasp User\"\n    }\n  }\n  updateGlobalState = (state) => this.setState({ ...state })\n  render() {\n    const { boolState, username } = this.state\n\n    const navbarProps = {\n      username,\n      updateGlobalState: this.updateGlobalState\n    }\n    return (\n      <React.Fragment>\n        {boolState ? (\n          <React.Fragment>\n            <NavbarProvider value={navbarProps}>\n              <Navbar />\n            \n            <SideBar />\n            <Render />\n            </NavbarProvider>\n          </React.Fragment>\n        ) : <NavbarProvider value={navbarProps}>\n            <Router>\n            <Login path=\"/\" onClick={() => this.updateGlobalState({ boolState: !boolState })} />\n            <Register path=\"/register\" />\n            \n          </Router>\n          </NavbarProvider>}\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}